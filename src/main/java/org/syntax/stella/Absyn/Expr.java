// File generated by the BNF Converter (bnfc 2.9.4.1).

package org.syntax.stella.Absyn;

public abstract class Expr implements java.io.Serializable {
  public abstract <R,A> R accept(Visitor<R,A> v, A arg);
  public interface Visitor <R,A> {
    public R visit(Sequence p, A arg);
    public R visit(Assign p, A arg);
    public R visit(If p, A arg);
    public R visit(Let p, A arg);
    public R visit(LetRec p, A arg);
    public R visit(TypeAbstraction p, A arg);
    public R visit(LessThan p, A arg);
    public R visit(LessThanOrEqual p, A arg);
    public R visit(GreaterThan p, A arg);
    public R visit(GreaterThanOrEqual p, A arg);
    public R visit(Equal p, A arg);
    public R visit(NotEqual p, A arg);
    public R visit(TypeAsc p, A arg);
    public R visit(TypeCast p, A arg);
    public R visit(Abstraction p, A arg);
    public R visit(Variant p, A arg);
    public R visit(Match p, A arg);
    public R visit(List p, A arg);
    public R visit(Add p, A arg);
    public R visit(Subtract p, A arg);
    public R visit(LogicOr p, A arg);
    public R visit(Multiply p, A arg);
    public R visit(Divide p, A arg);
    public R visit(LogicAnd p, A arg);
    public R visit(Ref p, A arg);
    public R visit(Deref p, A arg);
    public R visit(Application p, A arg);
    public R visit(TypeApplication p, A arg);
    public R visit(DotRecord p, A arg);
    public R visit(DotTuple p, A arg);
    public R visit(Tuple p, A arg);
    public R visit(Record p, A arg);
    public R visit(ConsList p, A arg);
    public R visit(Head p, A arg);
    public R visit(IsEmpty p, A arg);
    public R visit(Tail p, A arg);
    public R visit(Panic p, A arg);
    public R visit(Throw p, A arg);
    public R visit(TryCatch p, A arg);
    public R visit(TryWith p, A arg);
    public R visit(Inl p, A arg);
    public R visit(Inr p, A arg);
    public R visit(Succ p, A arg);
    public R visit(LogicNot p, A arg);
    public R visit(Pred p, A arg);
    public R visit(IsZero p, A arg);
    public R visit(Fix p, A arg);
    public R visit(NatRec p, A arg);
    public R visit(Fold p, A arg);
    public R visit(Unfold p, A arg);
    public R visit(ConstTrue p, A arg);
    public R visit(ConstFalse p, A arg);
    public R visit(ConstUnit p, A arg);
    public R visit(ConstInt p, A arg);
    public R visit(ConstMemory p, A arg);
    public R visit(Var p, A arg);

  }

}
